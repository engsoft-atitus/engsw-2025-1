name: Herdar Sprint e Time da issue mãe

on:
  issues:
    types: [opened]

jobs:
  herdar-campos:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Herdar campos via GraphQL
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || "";

            // Expressão para detectar 'Parent Issue: #123'
            const parentMatch = body.match(/Parent Issue:\s*#(\d+)/i);
            if (!parentMatch) {
              console.log("Sub-issue sem referência à issue mãe.");
              return;
            }

            const parentNumber = parseInt(parentMatch[1]);
            const { owner, repo } = context.repo;

            const projectId = "PVT_kwHODFUpIM4A2Vlg"; // engsw-2025-1
            const sprintFieldId = "PVTSSF_lAHODFUpIM4A2VlgzgrqSTA";
            const timeFieldId = "PVTSSF_lAHODFUpIM4A2VlgzgsJL0Q";

            // Buscar os valores dos campos na issue mãe
            const query = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    projectItems(first: 10) {
                      nodes {
                        id
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                id
                              }
                              optionId
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }`;

            const result = await github.graphql(query, { owner, repo, issueNumber: parentNumber });
            const parentItem = result.repository.issue.projectItems.nodes.find(item => item.fieldValues?.nodes?.length > 0);
            if (!parentItem) {
              console.log("Nenhum item de projeto encontrado na issue mãe.");
              return;
            }

            const sprintValue = parentItem.fieldValues.nodes.find(f => f.field.id === sprintFieldId);
            const timeValue = parentItem.fieldValues.nodes.find(f => f.field.id === timeFieldId);

            if (!sprintValue || !timeValue) {
              console.log("Sprint ou Time não definidos na issue mãe.");
              return;
            }

            // Agora buscar o item da nova issue (sub-issue)
            const subIssueQuery = `
              query($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    projectItems(first: 10) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }`;

            const subIssueData = await github.graphql(subIssueQuery, { owner, repo, issueNumber: issue.number });
            const subIssueItemId = subIssueData.repository.issue.projectItems.nodes[0]?.id;

            if (!subIssueItemId) {
              console.log("Sub-issue ainda não está no projeto.");
              return;
            }

            // Mutação para atualizar os campos
            const mutation = `
              mutation UpdateFields($itemId: ID!, $sprintOptionId: String!, $timeOptionId: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${projectId}",
                  itemId: $itemId,
                  fieldId: "${sprintFieldId}",
                  value: { singleSelectOptionId: $sprintOptionId }
                }) {
                  projectV2Item {
                    id
                  }
                }

                updateProjectV2ItemFieldValue(input: {
                  projectId: "${projectId}",
                  itemId: $itemId,
                  fieldId: "${timeFieldId}",
                  value: { singleSelectOptionId: $timeOptionId }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }`;

            await github.graphql(mutation, {
              itemId: subIssueItemId,
              sprintOptionId: sprintValue.optionId,
              timeOptionId: timeValue.optionId,
            });

            console.log("Campos herdados com sucesso!");
