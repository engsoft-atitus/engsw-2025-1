name: Herdar Sprint e Time da issue mãe

on:
  issues:
    types: [opened]

jobs:
  herdar-campos:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
      - name: Identificar issue pai e herdar campos
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const { owner, repo } = context.repo;

            // 1. Tentar encontrar a issue pai via body (se houver referência como "#123")
            const parentMatch = issue.body?.match(/#(\d+)/);
            let parentNumber = parentMatch ? parseInt(parentMatch[1]) : null;

            // 2. Se não encontrou no body, verificar se a issue foi criada a partir de um comentário
            if (!parentNumber) {
              console.log("Buscando issue pai via eventos de timeline...");
              const timeline = await github.rest.issues.listEventsForTimeline({
                owner,
                repo,
                issue_number: issue.number,
              });

              // Verificar se há um evento 'cross-referenced' (referência de outra issue)
              const crossRefEvent = timeline.data.find(
                (event) => event.event === "cross-referenced"
              );

              if (crossRefEvent?.source?.issue) {
                parentNumber = crossRefEvent.source.issue.number;
                console.log(`Issue pai encontrada via cross-reference: #${parentNumber}`);
              }
            }

            if (!parentNumber) {
              console.log("Nenhuma issue pai detectada. Encerrando.");
              return;
            }

            // 3. Buscar campos da issue pai no projeto
            const projectId = "PVT_kwHODFUpIM4A2Vlg"; // Substitua pelo seu Project ID
            const sprintFieldId = "PVTSSF_lAHODFUpIM4A2VlgzgrqSTA"; // ID do campo Sprint
            const timeFieldId = "PVTSSF_lAHODFUpIM4A2VlgzgsJL0Q"; // ID do campo Time

            const query = `
              query GetParentIssueFields($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    projectItems(first: 10) {
                      nodes {
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                id
                              }
                              optionId
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }`;

            const parentData = await github.graphql(query, { owner, repo, issueNumber: parentNumber });
            const parentItem = parentData.repository.issue.projectItems.nodes[0];

            if (!parentItem?.fieldValues?.nodes?.length) {
              console.log("Issue pai não está no projeto ou não tem campos definidos.");
              return;
            }

            const sprintValue = parentItem.fieldValues.nodes.find(f => f.field?.id === sprintFieldId);
            const timeValue = parentItem.fieldValues.nodes.find(f => f.field?.id === timeFieldId);

            if (!sprintValue || !timeValue) {
              console.log("Campos Sprint ou Time não definidos na issue pai.");
              return;
            }

            // 4. Atualizar a sub-issue com os campos da issue pai
            const subIssueQuery = `
              query GetSubIssueProjectItem($owner: String!, $repo: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $repo) {
                  issue(number: $issueNumber) {
                    projectItems(first: 10) {
                      nodes {
                        id
                      }
                    }
                  }
                }
              }`;

            const subIssueData = await github.graphql(subIssueQuery, { owner, repo, issueNumber: issue.number });
            const subIssueItemId = subIssueData.repository.issue.projectItems.nodes[0]?.id;

            if (!subIssueItemId) {
              console.log("Sub-issue ainda não está no projeto. Adicione-a manualmente.");
              return;
            }

            const mutation = `
              mutation UpdateSubIssueFields(
                $itemId: ID!,
                $sprintOptionId: String!,
                $timeOptionId: String!
              ) {
                updateSprint: updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "${projectId}",
                    itemId: $itemId,
                    fieldId: "${sprintFieldId}",
                    value: { singleSelectOptionId: $sprintOptionId }
                  }
                ) { projectV2Item { id } }

                updateTime: updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "${projectId}",
                    itemId: $itemId,
                    fieldId: "${timeFieldId}",
                    value: { singleSelectOptionId: $timeOptionId }
                  }
                ) { projectV2Item { id } }
              }`;

            await github.graphql(mutation, {
              itemId: subIssueItemId,
              sprintOptionId: sprintValue.optionId,
              timeOptionId: timeValue.optionId,
            });

            console.log("✅ Campos herdados com sucesso!");
